# -*- coding: utf-8 -*-
"""Petrol_Consumption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X6qgvNe9n4-TnbVaqBGJyKZtxU5GW_GJ

# Petrol Consumption
For the given dataset, predict the co-relation between petrol consumption and different features affecting it.

*Criteria: Low RMSE to pass.*

# Importing the Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""# Data Preprocessing"""

df = pd.read_csv('petrol_consumption.csv')

df.head()

df.describe()

df.info()

X = df.iloc[: , : -1].values
y = df.iloc[: ,  -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""# Model of choice
The model of choice for this challenge will be a decision tree Regressor. The reason behind this is simple. The decision tree model is well adapted to higher dimensional datasets, and additionally no preprocessing is needed.
"""

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(random_state=0)
regressor.fit(X_train, y_train)

"""# Calculating The Loss after training
The loss after training is calculated through Root mean squared error function, which is a cost function.
Basically:
$$RMSE = \sqrt{(\frac{1}{n})\sum_{i=1}^{n}(y_{i} – \hat{y_{i}})^{2}}$$
The RMSE of a model determines the absolute fit of the model to the data. In other words, it indicates how close the actual data points are to the model’s predicted values. A low value of RMSE indicates a better fit and is a good measure for determining the accuracy of the model’s predictions.
"""

from sklearn.metrics import mean_squared_error

y_pred = regressor.predict(X_test)

rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)), '.3f'))

print(f'RMSE: ', rmse)

"""# Visualising the decision tree
Decision trees in higher dimensions are generally not visualizable. However, there is a function in the sklearn.tree module which does that. We will use that function to visualize the entire decision tree which our model built and used.
"""

from sklearn.tree import plot_tree
fig = plt.figure(figsize=(25,20))
_ = plot_tree(regressor,
                   feature_names=['Petrol_tax', 'Average_income', 'Paved_Highways', 'Population_Driver_licence(%)'],
                   filled=True)
fig.savefig("decision_tree.pdf")